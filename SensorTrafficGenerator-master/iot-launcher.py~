# -*- coding: utf-8 -*-
import sys
import subprocess
import os
import shutil
import random
import signal
import time

spawns=[] #list of subprocesses spawned 

def usage():
    print "iot-launcher.py <server_ip> <server_port> <sim_time> <num_of_sensors>"

def signal_handler(signal, frame):
  print 'Shutting down Launcher...'
  #probably need to close all the forked subprocesses?
  sys.exit(0)

def main(argv):
  ipaddr="127.0.0.1"
  s_port="5000"
  c_port="5001"
  sim_time=200 #seconds
  N=4 #or >4 (number of sensors)
  
  if(len(argv)>=2):
     ipaddr=argv[0]
     s_port=argv[1]
     if(len(argv)>=3):
      sim_time=int(argv[2])
      if(len(argv)==4):
        N=int(argv[3])
  if len(argv)!=0:
    if (argv[0] == "-h" or argv[0]=="--help"):
      usage()
      sys.exit(0)
  else:
    print "using Launcher defaults =>"

  print "ip",ipaddr,"and sensor port:",s_port
  print "sim_time",sim_time
  print "number of sensors",N
  
  start_time = round(time.time(), 3)

  #[STEP1]: starting sensors
  sensors=["temp", "device", "gps", "camera"]
  
  #creating sensor.list
  sensorFile = open('sensor.list', 'wb')

  for i in range(N): 
    #choose randomly a sensor from the list
    sensor_type=sensors[i]
    sid=str(i)
    
    if (N>4):
      sensor_type=random.choice(sensors)
      sid=str(random.randint(10000,99999))
    
    print "starting",(sensor_type+"_"+sid),"..."
    sensorFile.write(str(sensor_type+"_"+sid+"\n"))
    #forking a subprocess 
    spawns.append(subprocess.Popen(["python","sensor.py", sensor_type, ipaddr, s_port, sid],stdout=False,shell=False))
    #print spawns[i].pid
    #spawns[i].wait()
  
  #close sensor.list file
  sensorFile.close()

  #[STEP2]: starting IoT Server to handle input from sensors
  # NOTE: depending on your coding language the values in the list will change
  # Also implement SIGINT (Ctrl+C), so that we can kill them. 
  #spawns.append(subprocess.Popen(["iot-server.o", ipaddr, port],stdout=False,shell=False))
  print("Starting server...")
  spawns.append(subprocess.Popen(["python","../server.py", s_port, c_port, "1"],stdout=False,shell=False))
  print("Server started.")
  
  '''
  [STEP3]: start your clients here
  NOTE: depending on your coding language the values in the list will change
  Also implement SIGINT (Ctrl+C), so that we can kill them. 
  # for i in range(M): # where M is the number of clients. This should be added to the command line args if needed
  #   spawns.append(subprocess.Popen(["iot-client.o","ipaddr, port, sensorid],stdout=True,shell=False))
  '''
  print("Starting clients...")
  spawns.append(subprocess.Popen(["python","../client.py","name", ipaddr, c_port ,"1"],stdout=True,shell=False))
  print("Clients started")

  time.sleep(sim_time)
  print "killing processes after", (time.time()-start_time)
  for s in spawns:
    #print s.pid
    os.kill(s.pid, signal.SIGINT)

if __name__ == "__main__":
  signal.signal(signal.SIGINT, signal_handler)
  main(sys.argv[1:])
